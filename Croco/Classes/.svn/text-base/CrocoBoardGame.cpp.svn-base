#include "AppDelegate.h"

#include "CrocoBoardGame.h"
#include "GroupCustomization.h"
#include "MainMenuLayer.h"

#include "math.h"

CellTable::CellTable(int id, float x, float y, char activity, int F)
{
	m_Id = id;
	m_X=x; m_Y=y;
	m_Activity=activity;
	m_F=F;
}
void CellTable::ChangeCellF(int F)
{
	m_F^=F;
}
/*
layer	- ÒÎÓÈ, Ì‡ ÍÓÚÓ˚È ‰Ó·‡‚ÎˇÂÚÒˇ ÙË¯Í‡;
ps		- ÒÔ‡ÈÚ ÙË¯ÍË;
pss		- ÒÔ‡ÈÚ ÚÂÌË ÙË¯ÍË
cs		- ÚÂÍÛ˘‡ˇ ÔÓÁËˆËˇ ‚ Ú‡·ÎËˆÂ ÍÓÓ‰ËÌ‡Ú
pos		- ÔÓÁËˆËˇ ‚ ÔËÍÒÂÎˇı ÔË ËÌËˆË‡ÎËÁ‡ˆËË
*/
SpriteTokenClass::SpriteTokenClass(CCLayer* layer, CCSprite* ps, CCSprite* pss, int cs, CCPoint pos)
{
	pS_FShadow = pss;
	pS_F = ps;
	layer->addChild(ps,1);
	layer->addChild(pss,2);
	ps->setPosition(pos);
	pss->setPosition(pos);
	
	pss->setScale(0.24f);
	ps->setScale(0.3f);
	pss->setPosition(pos);
	pss->setAnchorPoint(ccp(0.5,0.1));
	pss->setPosition(pos);
	pss->setScaleX(0.24f);
	pss->setScaleY(0.76f*pos.y/LUM_Y+0.15f);
	pss->setRotation(atan((pos.x-LUM_X)/LUM_Y)*180.0f/PI);

	m_CurrentPosition=cs;
}
void SpriteTokenClass::setCurrentPos(int pos)
{
	this->m_CurrentPosition=pos;
}

ActionLayer::~ActionLayer()
{
	delete(dbw);
}

ActionLayer::ActionLayer()
{
}

ActionLayer::ActionLayer(int GameMode, std::string *RedName, std::string *GreenName, std::string *BlueName, std::string *YellowName)
{
	dbw = new DBWord("cards.xml");
	int isRed;
	dbw->getWord(3,"P", isRed);

	//game mode
	m_GameMode = GameMode;
	m_RedName = RedName;
	m_GreenName = GreenName;
	m_BlueName = BlueName;
	m_YellowName = YellowName;

	//screen center
    size = CCDirector::sharedDirector()->getWinSize();
	x = size.width/2;
    y = size.height/2;

	//init tokens
	//numGroupsInGame
	switch(m_GameMode)
	{
		case GAMERS_3:	
			tokens[0] = new SpriteTokenClass(this,CCSprite::spriteWithFile("tokens/token_red.png"),CCSprite::spriteWithFile("tokens/token_shadow.png"),0,ccp(870.0,685.0)); tokens[0]->pS_F->setTag(ID_RED); tokens[0]->m_groupname=RedName;
			tokens[1] = new SpriteTokenClass(this,CCSprite::spriteWithFile("tokens/token_green.png"),CCSprite::spriteWithFile("tokens/token_shadow.png"),0,ccp(870.0,630.0)); tokens[1]->pS_F->setTag(ID_GREEN);	tokens[1]->m_groupname=GreenName;
			tokens[2] = new SpriteTokenClass(this,CCSprite::spriteWithFile("tokens/token_blue.png"),CCSprite::spriteWithFile("tokens/token_shadow.png"),0,ccp(945.0,685.0)); tokens[2]->pS_F->setTag(ID_BLUE); tokens[2]->m_groupname=BlueName;			
			groups[0].CurGroupPosition(0);	groups[0].NextGroupPtr(&groups[1]);
			groups[1].CurGroupPosition(0);	groups[1].NextGroupPtr(&groups[2]);
			groups[2].CurGroupPosition(0);	groups[2].NextGroupPtr(&groups[0]);
			numGroupsInGame=3;break;
		case GROUP_2:		
			tokens[0] = new SpriteTokenClass(this,CCSprite::spriteWithFile("tokens/token_red.png"),CCSprite::spriteWithFile("tokens/token_shadow.png"),0,ccp(870.0,685.0)); tokens[0]->pS_F->setTag(ID_RED); tokens[0]->m_groupname=RedName;
			tokens[1] = new SpriteTokenClass(this,CCSprite::spriteWithFile("tokens/token_green.png"),CCSprite::spriteWithFile("tokens/token_shadow.png"),0,ccp(870.0,630.0)); tokens[1]->pS_F->setTag(ID_GREEN);	tokens[1]->m_groupname=GreenName;
			groups[0].CurGroupPosition(0);	groups[0].NextGroupPtr(&groups[1]);
			groups[1].CurGroupPosition(0);	groups[1].NextGroupPtr(&groups[0]);			
			numGroupsInGame=2;break;
		case GROUP_3:			
			tokens[0] = new SpriteTokenClass(this,CCSprite::spriteWithFile("tokens/token_red.png"),CCSprite::spriteWithFile("tokens/token_shadow.png"),0,ccp(870.0,685.0)); tokens[0]->pS_F->setTag(ID_RED); tokens[0]->m_groupname=RedName;
			tokens[1] = new SpriteTokenClass(this,CCSprite::spriteWithFile("tokens/token_green.png"),CCSprite::spriteWithFile("tokens/token_shadow.png"),0,ccp(870.0,630.0)); tokens[1]->pS_F->setTag(ID_GREEN);	tokens[1]->m_groupname=GreenName;
			tokens[2] = new SpriteTokenClass(this,CCSprite::spriteWithFile("tokens/token_blue.png"),CCSprite::spriteWithFile("tokens/token_shadow.png"),0,ccp(945.0,685.0)); tokens[2]->pS_F->setTag(ID_BLUE); tokens[2]->m_groupname=BlueName;
			groups[0].CurGroupPosition(0);	groups[0].NextGroupPtr(&groups[1]);
			groups[1].CurGroupPosition(0);	groups[1].NextGroupPtr(&groups[2]);
			groups[2].CurGroupPosition(0);	groups[2].NextGroupPtr(&groups[0]);
			numGroupsInGame=3;break;
		case GROUP_4:	
			tokens[0] = new SpriteTokenClass(this,CCSprite::spriteWithFile("tokens/token_red.png"),CCSprite::spriteWithFile("tokens/token_shadow.png"),0,ccp(870.0,685.0)); tokens[0]->pS_F->setTag(ID_RED); tokens[0]->m_groupname=RedName;
			tokens[1] = new SpriteTokenClass(this,CCSprite::spriteWithFile("tokens/token_green.png"),CCSprite::spriteWithFile("tokens/token_shadow.png"),0,ccp(870.0,630.0)); tokens[1]->pS_F->setTag(ID_GREEN);	tokens[1]->m_groupname=GreenName;
			tokens[2] = new SpriteTokenClass(this,CCSprite::spriteWithFile("tokens/token_blue.png"),CCSprite::spriteWithFile("tokens/token_shadow.png"),0,ccp(945.0,685.0)); tokens[2]->pS_F->setTag(ID_BLUE); tokens[2]->m_groupname=BlueName;
			tokens[3] = new SpriteTokenClass(this,CCSprite::spriteWithFile("tokens/token_yellow.png"),CCSprite::spriteWithFile("tokens/token_shadow.png"),0,ccp(945.0,630.0)); tokens[3]->pS_F->setTag(ID_YELLOW); tokens[3]->m_groupname=YellowName;
			groups[0].CurGroupPosition(0);	groups[0].NextGroupPtr(&groups[1]);
			groups[1].CurGroupPosition(0);	groups[1].NextGroupPtr(&groups[2]);
			groups[2].CurGroupPosition(0);	groups[2].NextGroupPtr(&groups[3]);
			groups[3].CurGroupPosition(0);	groups[3].NextGroupPtr(&groups[0]);
			numGroupsInGame=4;break;
	}
	for (int i = 0; i < numGroupsInGame; i++)
		tokens[i]->m_CurNumber = i;

	//randomize start
	srand((unsigned)time(NULL));
	current_group=rand()%numGroupsInGame;
	active_token = tokens[current_group];
	curGroupPtr = &groups[current_group];

	// push to vec
	CGroupsSnapshot gs(groups);	
	snaps.PushSnapshot(gs);
	snaps.IncCurAct();

	// game logic
	gl.setActionLayerPtr(this);
	gl.StartGame();

	// ÓÓ‰ËÌ‡Ú˚ ˇ˜ÂÂÍ
	float mtx[45][2] = {
	{746,662},
	{661,662},
	{579,662},
	{496,662},
	{408,662},
	{323,662},
	{238,662},

	{141,641},
	{141,549},

	{238,521},
	{323,521},
	{408,521},
	{496,521},
	{579,521},
	{661,521},

	{741,511},
	{741,451},

	{661,439},
	{579,439},
	{496,439},
	{408,439},

	{324,424},
	{324,347},

	{408,329},
	{496,329},
	{579,329},
	{661,329},

	{741,317},
	{741,256},

	{661,245},
	{579,245},
	{496,245},
	{408,245},
	{323,245},
	{238,245},

	{141,222},
	{141,126},

	{238,105},
	{323,105},
	{408,105},
	{496,105},
	{579,105},
	{661,105},
	{746,105},
	{883,105},
	};
	//»ÌËˆË‡ÎËÁ‡ˆËˇ Ú‡·ÎËˆ˚
	for(int i=0;i<TABLEMAX;i++)
		{
			tbl[i] = new CellTable(i,mtx[i][0],mtx[i][1],'O',0);
		}

	//tbl[0]->ChangeCellF(15);

	//‘ÓÌ - ÒÚÓÎ
	const char* fDesk="desk.png";
	CCSprite* sDesk=CCSprite::spriteWithFile(fDesk);
	addChild(sDesk,0);
	sDesk->setPosition(CCPointMake(x,y));

	//GameMenu
	CCMenuItemImage* itm_rewind = CCMenuItemImage::itemFromNormalImage("GameMenu/menu-rewind.png","GameMenu/menu-rewind-a.png",this,menu_selector(ActionLayer::itm_rewindCallback));
	CCMenuItemImage* itm_gamemenu = CCMenuItemImage::itemFromNormalImage("GameMenu/menu-button.png","GameMenu/menu-button-a.png",this, menu_selector(ActionLayer::itm_gamemenuCallback));
	CCMenuItemImage* itm_forward = CCMenuItemImage::itemFromNormalImage("GameMenu/menu-forward.png","GameMenu/menu-forward-a.png",this, menu_selector(ActionLayer::itm_forwardCallback));
	game_menu = CCMenu::menuWithItems(itm_rewind,itm_gamemenu, itm_forward, NULL);
	game_menu->alignItemsHorizontallyWithPadding(30);
	addChild(game_menu);
	game_menu->setPosition(ccp(x,20));

	//TestMenu
	CCMenuItemFont* item1 = CCMenuItemFont::itemFromString("go 3", this, menu_selector(ActionLayer::Card3Callback));
	CCMenuItemFont* item2 = CCMenuItemFont::itemFromString("go 4", this, menu_selector(ActionLayer::Card4Callback));
	CCMenuItemFont* item3 = CCMenuItemFont::itemFromString("go 5", this, menu_selector(ActionLayer::Card5Callback));
	CCMenuItemFont* itemA = CCMenuItemFont::itemFromString("go -1", this, menu_selector(ActionLayer::GoBackOneCallback));
	CCMenuItemFont* item4 = CCMenuItemFont::itemFromString("change token", this, menu_selector(ActionLayer::ChangeSelectorCallback));
	menu_question = CCMenu::menuWithItems(item1,item2, item3, itemA, item4, NULL);
	menu_question->alignItemsVertically();
	addChild(menu_question);
	menu_question->setPosition(CCPointMake(x+200,y-200));

	//Cards
	itm_card3 = CCMenuItemImage::itemFromNormalImage("RightControl/c3.png","RightControl/c3.png","RightControl/c3.png",this,menu_selector(ActionLayer::itm_card3Callback));
	itm_card4 = CCMenuItemImage::itemFromNormalImage("RightControl/c4.png","RightControl/c4.png","RightControl/c4.png",this,menu_selector(ActionLayer::itm_card4Callback));
	itm_card5 = CCMenuItemImage::itemFromNormalImage("RightControl/c5.png","RightControl/c5.png","RightControl/c5.png",this,menu_selector(ActionLayer::itm_card5Callback));
	mn_Cards = CCMenu::menuWithItems(itm_card3, itm_card4, itm_card5, NULL);
	mn_Cards->alignItemsVerticallyWithPadding(CARD_PADDING);
	addChild(mn_Cards);
	m_mnCardsX=x+CARD_OFFSET_X;
	m_mnCardsY=y+CARD_OFFSET_Y;
	mn_Cards->setPosition(CCPointMake(m_mnCardsX,m_mnCardsY));
	mn_Cards->setIsVisible(1);
	mn_Cards->setIsTouchEnabled(true);

	//Answers
	itm_yes = CCMenuItemImage::itemFromNormalImage("itm_yes_norm.png","itm_yes_norm.png","itm_yes_norm.png",this,menu_selector(ActionLayer::itm_yesCallback));
	itm_no = CCMenuItemImage::itemFromNormalImage("itm_no_norm.png","itm_no_norm.png","itm_no_norm.png",this,menu_selector(ActionLayer::itm_noCallback));
	itm_other = CCMenuItemImage::itemFromNormalImage("itm_other_norm.png","itm_other_norm.png","itm_other_norm.png",this,menu_selector(ActionLayer::itm_otherCallback));
	itm_other->setTag(RED);
	mn_Answers = CCMenu::menuWithItems(itm_yes, itm_no, itm_other, NULL);
	mn_Answers->alignItemsVerticallyWithPadding(CARD_PADDING);
	addChild(mn_Answers);
	mn_Answers->setPosition(ccp(m_mnCardsX,m_mnCardsY));
	mn_Answers->setIsVisible(false);

	/*/Who answer
	itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank1.png","c_blank1.png","c_blank1.png",this,menu_selector(ActionLayer::itm_1opponentCallback));
	itm_2opponent = CCMenuItemImage::itemFromNormalImage("c_blank2.png","c_blank2.png","c_blank2.png",this,menu_selector(ActionLayer::itm_2opponentCallback));
	itm_3opponent = CCMenuItemImage::itemFromNormalImage("c_blank3.png","c_blank3.png","c_blank3.png",this,menu_selector(ActionLayer::itm_3opponentCallback));
	mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, itm_2opponent, itm_3opponent, NULL);
	mn_WhoAnswer->alignItemsVerticallyWithPadding(CARD_PADDING);
	addChild(mn_WhoAnswer);
	mn_WhoAnswer->setPosition(ccp(m_mnCardsX,m_mnCardsY));
	mn_WhoAnswer->setIsVisible(false);
	//*/
	
	//Timer
	//stop timer
	pL_Timer = CCLayer::node();
	addChild(pL_Timer,0);
	pL_Timer->setPosition(ccp(-110,y)); //-110
		//timer
	CCSprite* pS_TimerDesk = CCSprite::spriteWithFile("Timer/timer_forest.png"); 
	pL_Timer->addChild(pS_TimerDesk,1);
		//timer_digits
	CCSprite* pS_Timer_digits = CCSprite::spriteWithFile("Timer/timer_digits_passive.png");
	pL_Timer->addChild(pS_Timer_digits,1);
	pS_Timer_digits->setPosition(ccp(11,-3));
		//timer_digits_light
	CCSprite* pS_Timer_digits_l = CCSprite::spriteWithFile("Timer/timer_digits_light.png");
	pS_Timer_digits_l->setOpacity(255);
	pL_Timer->addChild(pS_Timer_digits_l,3,ID_DIGITS_L);
	pS_Timer_digits_l->setPosition(ccp(-4,-24));
		//button
	itm_Timer_start = CCMenuItemImage::itemFromNormalImage("Timer/itm_timer_norm.png","Timer/itm_timer_sel.png","Timer/itm_timer_norm.png",this,menu_selector(ActionLayer::itm_TimerStartCallback));
	itm_Timer_pause = CCMenuItemImage::itemFromNormalImage("Timer/itm_timer_stop_norm.png","Timer/itm_timer_stop_sel.png","Timer/itm_timer_stop_norm.png",this,menu_selector(ActionLayer::itm_TimerPauseCallback));
	itm_Timer_run = CCMenuItemImage::itemFromNormalImage("Timer/itm_timer_run_norm.png","Timer/itm_timer_run_sel.png","Timer/itm_timer_run_norm.png",this,menu_selector(ActionLayer::itm_TimerRunCallback));
	mn_Timer = CCMenu::menuWithItems(itm_Timer_start,itm_Timer_pause,itm_Timer_run,NULL);
	pL_Timer->addChild(mn_Timer,3);
	mn_Timer->setPosition(ccp(8,-8));
	itm_Timer_pause->setIsVisible(false);
	itm_Timer_run->setIsVisible(false);
		//button_light
	CCSprite* pS_Timer_button_l = CCSprite::spriteWithFile("Timer/itm_timer_norm_light.png");
	pS_Timer_button_l->setOpacity(100);
	pL_Timer->addChild(pS_Timer_button_l,3,ID_BUTTON_L);
	pS_Timer_button_l->setPosition(ccp(3,-12));

	//audio
    /*
	SimpleAudioEngine::sharedEngine()->playBackgroundMusic(std::string(CCFileUtils::fullPathFromRelativePath(MUSIC_GAME)).c_str(), true);
*/
	/*
	CCSprite* anim = CCSprite::spriteWithFile("sonic.png");
	addChild(anim);
	anim->setPosition(ccp(x-200,y));

	CCAnimation* ca = CCAnimation::animation();
	char frameName[100] = {0};
	for(int i=1;i<4;i++)
	{
		sprintf(frameName, "anim/h_%d.png", i);
        ca->addFrameWithFileName(frameName);
	}

	CCActionInterval*  action = CCAnimate::actionWithDuration(2, ca, false);
    CCActionInterval*  action_back = action->reverse();
    anim->runAction( CCSequence::actions( action, action_back, NULL));
	*/
}

//GameMenuCallbacks
void ActionLayer::itm_rewindCallback(CCObject* pSender)
{
	if(!mn_Cards->getIsTouchEnabled())
	{
		mn_WhoAnswer->setIsVisible(0);
		mn_Cards->setIsVisible(1);
		mn_Cards->setIsTouchEnabled(1);

		HideTimer();
		DropCard();
		//RewindAnimation(this); //rewind animation
		return;
	}
		
	int chPos, actGlobal;
	actGlobal = snaps.getCurActGlobal();
	while(actGlobal == snaps.getCurActGlobal())
	{		
		CGroupsSnapshot oldGs, curGs;
		snaps.GetSnapshot(curGs);
		snaps.PopSnapshot(oldGs);		
		if(chPos == curGs.CompareSnapshots(&oldGs, current_group))
		{
			curGroupPtr = &groups[current_group];
			curGroupPtr->ChangeCurGroupPos(chPos);
			active_token = tokens[current_group];
			FMove(active_token, chPos);
			RewindAnimation(this); //rewind animation			
		}
		else
			break;
	}

	gl.ContinueGame();
}
void ActionLayer::itm_gamemenuCallback(CCObject* pSender)
{
    SaveMenuState();
	CCLayerColor* lc = CCLayerColor::node();
	lc->setOpacity(0);
	addChild(lc,5,ID_SHADOWLAYER);
	lc->runAction(CCEaseIn::actionWithAction(CCFadeTo::actionWithDuration(0.4f,165),0.8f));

	GameMenuLayer* pL_GameMenu = new GameMenuLayer();
	this->addChild(pL_GameMenu,6, ID_GAMEMENU);
}
void ActionLayer::itm_forwardCallback(CCObject* pSender)
{
	// Í‡ÚÛ ‚ÁˇÚ¸ ???
	/*
	if(!mn_Cards->getIsTouchEnabled())
		{
			mn_WhoAnswer->setIsVisible(0);
			mn_Cards->setIsVisible(1);
			mn_Cards->setIsTouchEnabled(1);
	
			HideTimer();
			DropCard();
			return;
		}*/
	if(snaps.CheckZero())
		return;
	
	int chPos, actGlobal;
	actGlobal = snaps.getFCurActGlobal();
	while(actGlobal == snaps.getFCurActGlobal())
	{		
		CGroupsSnapshot newGs, curGs;
		snaps.GetSnapshot(curGs);
		snaps.PopFSnapshot(newGs);
		//CGroupsSnapshot oldGs, curGs(groups);
		//snaps.PopSnapshot(oldGs);	
		if(chPos == curGs.CompareSnapshots(&newGs, current_group))
		{
			curGroupPtr = &groups[current_group];
			curGroupPtr->ChangeCurGroupPos(chPos);
			active_token = tokens[current_group];
			FMove(active_token, chPos);
			RewindAnimation(this); //rewind animation
		}
		else
			break;

		gl.ContinueGame();
	}
/*
	CGroupsSnapshot newGs, curGs(groups);
	snaps.PopFSnapshot(newGs);

	int chPos;
	while(chPos = curGs.CompareSnapshots(&newGs, current_group))
	{
		curGroupPtr = &groups[current_group];
		curGroupPtr->ChangeCurGroupPos(chPos);
		active_token = tokens[current_group];
		FMove(active_token, chPos);
	}	
*/
}

/*
Mode: TR - top right, TL - top left, BR - bottom right, BL - bottom left
*/
void ActionLayer::ShowHint(int Mode, CCPoint TargetPoint, const wchar_t* TextHint)
{
	CCLayer* pL_Hint = CCLayer::node();
	addChild(pL_Hint,3,HINT_LAYER);
	CCSprite* pS_Pointer = CCSprite::spriteWithFile("pointer.png");
	pL_Hint->addChild(pS_Pointer);
	CCLabelTTF* txt= CCLabelTTF::labelWithString(/*TextHint*/"test","Arial",18.0f);
	//CCLabelBMFont* txt = CCLabelBMFont::labelWithStringW(TextHint,"fonts/Segoe_script.fnt");
	pL_Hint->addChild(txt);
	txt->setPosition(ccp(x,y+330-txt->getContentSizeInPixels().height/2));
	CCActionInterval* move1;

	float move_distanse=10;

	switch (Mode)
	{
	case TR:
	pS_Pointer->setPosition(ccp(TargetPoint.x-30,TargetPoint.y-22)); //28 20
	pS_Pointer->setRotation(-45.0f);
	move1 = CCEaseInOut::actionWithAction(CCMoveBy::actionWithDuration(0.7f,ccp(-move_distanse,-move_distanse)),2.0f);break;
	case TL:
	pS_Pointer->setPosition(ccp(TargetPoint.x+30,TargetPoint.y-22));
	pS_Pointer->setRotation(-135.0f);
	move1 = CCEaseInOut::actionWithAction(CCMoveBy::actionWithDuration(0.7f,ccp(+move_distanse,-move_distanse)),2.0f);break;
	case BR:
	pS_Pointer->setPosition(ccp(TargetPoint.x-30,TargetPoint.y+22));
	pS_Pointer->setRotation(45.0f);
	move1 = CCEaseInOut::actionWithAction(CCMoveBy::actionWithDuration(0.7f,ccp(-move_distanse,+move_distanse)),2.0f);break;
	case BL:
	pS_Pointer->setPosition(ccp(TargetPoint.x+30,TargetPoint.y+22));
	pS_Pointer->setRotation(135.0f);
	move1 = CCEaseInOut::actionWithAction(CCMoveBy::actionWithDuration(0.7f,ccp(+move_distanse,+move_distanse)),2.0f);break;
	}

	CCActionInterval* move2 = CCEaseInOut::actionWithAction(move1->reverse(),2.0f);	
	CCActionInterval* fadein = CCFadeIn::actionWithDuration(0.4f);
	CCActionInterval* fadeout = CCFadeOut::actionWithDuration(0.6f);
	
	CCFiniteTimeAction* fta = CCSequence::actions((CCFiniteTimeAction*)move1->copy()->autorelease(),move2->copy()->autorelease(),NULL);
	CCFiniteTimeAction* fta2=CCSequence::actions((CCActionInterval*)CCDelayTime::actionWithDuration(0.4f),(CCActionInterval*)CCRepeat::actionWithAction((CCActionInterval*)fta,4),NULL);
	CCFiniteTimeAction* fta3 = CCSequence::actions((CCFiniteTimeAction*)CCDelayTime::actionWithDuration(6.7f),fadeout->copy()->autorelease(),CCCallFunc::actionWithTarget(this,callfunc_selector(ActionLayer::ShowHintCallback)), NULL);
	pS_Pointer->runAction((CCActionInterval*)fadein->copy()->autorelease());
	txt->runAction((CCActionInterval*)fadein->copy()->autorelease());
	pS_Pointer->runAction((CCActionInterval*)fta2);
	txt->runAction((CCActionInterval*)fta3->copy()->autorelease());
	pS_Pointer->runAction((CCActionInterval*)fta3->copy()->autorelease());
}
void ActionLayer::ShowHintCallback()
{
	//”‰‡ÎˇÂÏ ÒÎÓÈ Ò ÔÓ‰ÒÍ‡ÁÍ‡ÏË
	removeChildByTag(HINT_LAYER,1);
}

void ActionLayer::GoBackOneCallback(CCObject* pSender)
{
	FMoveCor(this->active_token,-1);	
	snaps.IncCurAct();

	//ChangeSelectorCallback(pSender);
}

void ActionLayer::CardPriceGo(CCObject* pSender)
{
	FMoveCor(this->active_token,curCardPrice);	
	snaps.IncCurAct();

	ChangeSelectorCallback(pSender);
}

void ActionLayer::Card3Callback(CCObject* pSender)
{	
	FMoveCor(this->active_token,3);	
	snaps.IncCurAct();

	ChangeSelectorCallback(pSender);	
}

void ActionLayer::Card4Callback(CCObject* pSender)
{	
	FMoveCor(this->active_token,4);	
	snaps.IncCurAct();

	ChangeSelectorCallback(pSender);	
}
void ActionLayer::Card5Callback(CCObject* pSender)
{	
	FMoveCor(this->active_token,5);
	snaps.IncCurAct();

	//ChangeSelectorCallback(pSender);	
}
void ActionLayer::ChangeSelectorCallback(CCObject* pSender)
{
	current_group=(current_group+1)%numGroupsInGame;
	active_token = tokens[current_group];
	curGroupPtr = &groups[current_group];
	//game logic
	gl.ContinueGame();
}

void ActionLayer::itm_yesCallback(CCObject* pSender)
{
	mn_Answers->setIsVisible(0);
	mn_Cards->setIsVisible(1);
	mn_Cards->setIsTouchEnabled(1);

	HideTimer();
	DropCard();

	CardPriceGo(pSender);	
}
void ActionLayer::itm_noCallback(CCObject* pSender)
{
	mn_Answers->setIsVisible(0);
	mn_Cards->setIsVisible(1);
	mn_Cards->setIsTouchEnabled(1);

	HideTimer();
	DropCard();	
	ChangeSelectorCallback(pSender);
}
void ActionLayer::itm_otherCallback(CCObject* pSender)
{
	mn_Answers->setIsVisible(0);
	//mn_WhoAnswer->setIsVisible(1);

	switch(m_GameMode)
	{
	case GAMERS_3:
		switch(active_token->m_CurNumber)
		{
			case 0:
				//Who answer
				itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank1.png","c_blank1.png","c_blank1.png",this,menu_selector(ActionLayer::itm_1opponentCallback));
				itm_1opponent->setTag(1);
				itm_2opponent = CCMenuItemImage::itemFromNormalImage("c_blank2.png","c_blank2.png","c_blank2.png",this,menu_selector(ActionLayer::itm_2opponentCallback));			
				itm_2opponent->setTag(2);
				mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, itm_2opponent, NULL);				
				break;
			case 1:
				//Who answer
				itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank0.png","c_blank0.png","c_blank0.png",this,menu_selector(ActionLayer::itm_1opponentCallback));
				itm_1opponent->setTag(0);
				itm_2opponent = CCMenuItemImage::itemFromNormalImage("c_blank2.png","c_blank2.png","c_blank2.png",this,menu_selector(ActionLayer::itm_2opponentCallback));			
				itm_2opponent->setTag(2);
				mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, itm_2opponent, NULL);
				break;
			case 2:
				//Who answer
				itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank0.png","c_blank0.png","c_blank0.png",this,menu_selector(ActionLayer::itm_1opponentCallback));
				itm_1opponent->setTag(0);
				itm_2opponent = CCMenuItemImage::itemFromNormalImage("c_blank1.png","c_blank1.png","c_blank1.png",this,menu_selector(ActionLayer::itm_2opponentCallback));			
				itm_2opponent->setTag(1);
				mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, itm_2opponent, NULL);
				break;	
		}
		break;
	case GROUP_2:
		switch(active_token->m_CurNumber)
		{
			case 0:
				//Who answer
				itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank1.png","c_blank1.png","c_blank1.png",this,menu_selector(ActionLayer::itm_1opponentCallback));
				itm_1opponent->setTag(1);
				mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, NULL);				
				break;
			case 1:
				//Who answer
				itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank0.png","c_blank0.png","c_blank0.png",this,menu_selector(ActionLayer::itm_1opponentCallback));				
				itm_1opponent->setTag(0);
				mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, NULL);
				break;			
		}
		break;
	case GROUP_3:
		switch(active_token->m_CurNumber)
		{
			case 0:
				//Who answer
				itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank1.png","c_blank1.png","c_blank1.png",this,menu_selector(ActionLayer::itm_1opponentCallback));
				itm_1opponent->setTag(1);
				itm_2opponent = CCMenuItemImage::itemFromNormalImage("c_blank2.png","c_blank2.png","c_blank2.png",this,menu_selector(ActionLayer::itm_2opponentCallback));			
				itm_2opponent->setTag(2);
				mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, itm_2opponent, NULL);				
				break;
			case 1:
				//Who answer
				itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank0.png","c_blank0.png","c_blank0.png",this,menu_selector(ActionLayer::itm_1opponentCallback));
				itm_1opponent->setTag(0);
				itm_2opponent = CCMenuItemImage::itemFromNormalImage("c_blank2.png","c_blank2.png","c_blank2.png",this,menu_selector(ActionLayer::itm_2opponentCallback));			
				itm_2opponent->setTag(2);
				mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, itm_2opponent, NULL);
				break;
			case 2:
				//Who answer
				itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank0.png","c_blank0.png","c_blank0.png",this,menu_selector(ActionLayer::itm_1opponentCallback));
				itm_1opponent->setTag(0);
				itm_2opponent = CCMenuItemImage::itemFromNormalImage("c_blank1.png","c_blank1.png","c_blank1.png",this,menu_selector(ActionLayer::itm_2opponentCallback));
				itm_2opponent->setTag(1);
				mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, itm_2opponent, NULL);
				break;		
		}
		break;
	case GROUP_4:	
		switch(active_token->m_CurNumber)
		{
			case 0:
				//Who answer
				itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank1.png","c_blank1.png","c_blank1.png",this,menu_selector(ActionLayer::itm_1opponentCallback));
				itm_1opponent->setTag(1);
				itm_2opponent = CCMenuItemImage::itemFromNormalImage("c_blank2.png","c_blank2.png","c_blank2.png",this,menu_selector(ActionLayer::itm_2opponentCallback));
				itm_2opponent->setTag(2);
				itm_3opponent = CCMenuItemImage::itemFromNormalImage("c_blank3.png","c_blank3.png","c_blank3.png",this,menu_selector(ActionLayer::itm_3opponentCallback));
				itm_3opponent->setTag(3);
				mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, itm_2opponent, itm_3opponent, NULL);				
				break;
			case 1:
				//Who answer
				itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank0.png","c_blank0.png","c_blank0.png",this,menu_selector(ActionLayer::itm_1opponentCallback));
				itm_1opponent->setTag(0);
				itm_2opponent = CCMenuItemImage::itemFromNormalImage("c_blank2.png","c_blank2.png","c_blank2.png",this,menu_selector(ActionLayer::itm_2opponentCallback));
				itm_2opponent->setTag(2);
				itm_3opponent = CCMenuItemImage::itemFromNormalImage("c_blank3.png","c_blank3.png","c_blank3.png",this,menu_selector(ActionLayer::itm_3opponentCallback));
				itm_3opponent->setTag(3);
				mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, itm_2opponent, itm_3opponent, NULL);
				break;
			case 2:
				//Who answer
				itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank0.png","c_blank0.png","c_blank0.png",this,menu_selector(ActionLayer::itm_1opponentCallback));
				itm_1opponent->setTag(0);
				itm_2opponent = CCMenuItemImage::itemFromNormalImage("c_blank1.png","c_blank1.png","c_blank1.png",this,menu_selector(ActionLayer::itm_2opponentCallback));
				itm_2opponent->setTag(1);
				itm_3opponent = CCMenuItemImage::itemFromNormalImage("c_blank3.png","c_blank3.png","c_blank3.png",this,menu_selector(ActionLayer::itm_3opponentCallback));
				itm_3opponent->setTag(3);
				mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, itm_2opponent, itm_3opponent, NULL);
				break;
			case 3:
				//Who answer
				itm_1opponent = CCMenuItemImage::itemFromNormalImage("c_blank0.png","c_blank0.png","c_blank0.png",this,menu_selector(ActionLayer::itm_1opponentCallback));
				itm_1opponent->setTag(0);
				itm_2opponent = CCMenuItemImage::itemFromNormalImage("c_blank1.png","c_blank1.png","c_blank1.png",this,menu_selector(ActionLayer::itm_2opponentCallback));
				itm_2opponent->setTag(1);
				itm_3opponent = CCMenuItemImage::itemFromNormalImage("c_blank2.png","c_blank2.png","c_blank2.png",this,menu_selector(ActionLayer::itm_3opponentCallback));
				itm_3opponent->setTag(2);
				mn_WhoAnswer = CCMenu::menuWithItems(itm_1opponent, itm_2opponent, itm_3opponent, NULL);
				break;
		}
		break;
	}

	mn_WhoAnswer->alignItemsVerticallyWithPadding(CARD_PADDING);
	addChild(mn_WhoAnswer);
	mn_WhoAnswer->setPosition(ccp(m_mnCardsX,m_mnCardsY));
	mn_WhoAnswer->setIsVisible(true);
}

void ActionLayer::itm_card3Callback(CCObject* pSender)
{
	curCardPrice = 3;
	mn_Cards->setIsTouchEnabled(0);
	checked_card = CCSprite::spriteWithFile("RightControl/c3.png");
	addChild(checked_card,2,CARD_LAYER);
	checked_card->setPosition(CCPointMake(m_mnCardsX,m_mnCardsY+CARD_HEIGHT+CARD_PADDING));
	MoveCardFromControl();
}
void ActionLayer::MoveCardFromControl()
{
	CCActionInterval* move=CCMoveTo::actionWithDuration(0.5f,CCPointMake(m_mnCardsX,m_mnCardsY+2*(126+CARD_PADDING)));
	//CCActionInterval* move_exp_in = (CCActionInterval*)CCEaseExponentialIn::actionWithAction((CCActionInterval*)(move->copy()->autorelease()));
	CCActionInterval* move_exp_in = (CCActionInterval*)CCEaseInOut::actionWithAction((CCActionInterval*)(move->copy()->autorelease()),4.0f);

	CCActionInterval* delay = CCDelayTime::actionWithDuration(0.2f);
	
	CCFiniteTimeAction* seq = CCSequence::actions(move_exp_in, delay, CCCallFunc::actionWithTarget(this,callfunc_selector(ActionLayer::MoveCardFromControlCallback)), NULL);

	checked_card->runAction(seq);
}
void ActionLayer::MoveCardFromControlCallback()
{
	CCActionInterval* rot = CCRotateTo::actionWithDuration(0.7f,-90.f);
	CCActionInterval* rot_exp_in = (CCActionInterval*)CCEaseInOut::actionWithAction((CCActionInterval*)(rot->copy()->autorelease()),3.0f);

	CCActionInterval* scale = CCScaleBy::actionWithDuration(0.35f, 0.0f, 3.0f);
	CCActionInterval* scale_exp_in = (CCActionInterval*)CCEaseIn::actionWithAction((CCActionInterval*)(scale->copy()->autorelease()),3.0f);

	CCActionInterval* move_center = CCMoveTo::actionWithDuration(0.7f,CCPointMake(x,y));
	CCActionInterval* move_center_exp_in = (CCActionInterval*)CCEaseInOut::actionWithAction((CCActionInterval*)(move_center->copy()->autorelease()),3.0f);

	checked_card->runAction(move_center_exp_in);
	checked_card->runAction(rot_exp_in);
	checked_card->runAction(CCSequence::actions(scale_exp_in,CCCallFunc::actionWithTarget(this,callfunc_selector(ActionLayer::MoveCardFaceSide)),NULL));

	ShowTimer();
}
void ActionLayer::MoveCardFaceSide()
{
	float posx,posy;
	posx = checked_card->getPosition().x;
	posy = checked_card->getPosition().y;
	checked_card->stopAllActions();
	
	float rotc,sccx,sccy;

	rotc = checked_card->getRotation();
	sccx = checked_card->getScaleX();
	sccy = checked_card->getScaleY()/3.4f;

	this->removeChildByTag(CARD_LAYER,1);
	checked_card = CCSprite::spriteWithFile("c_big.png");
	
	this->addChild(checked_card,2);
	checked_card->setPosition(ccp(posx,posy));
	checked_card->setRotation(rotc);
	checked_card->setScaleX(sccx);
	checked_card->setScaleY(sccy);
	
	//Word
	int isr;
	word = CCLabelTTF::labelWithString((const char*)dbw->getWord(3,"P",isr),FONT_NAME,FONT_SIZE);
	checked_card->addChild(word);
	word->setRotation(90.0f);
	word->setPosition(ccp(40,80));

	CCActionInterval* rot = CCRotateTo::actionWithDuration(0.35f,-90.0f);
	//CCActionInterval* rot_exp_in = (CCActionInterval*)CCEaseOut::actionWithAction((CCActionInterval*)(rot->copy()->autorelease()),2.0f);
	CCActionInterval* rot_exp_in = (CCActionInterval*)CCEaseExponentialOut::actionWithAction((CCActionInterval*)(rot->copy()->autorelease()));

	CCActionInterval* scale = CCScaleTo::actionWithDuration(0.35f, 1.0f, 1.0f);
	//CCActionInterval* scale_exp_in = (CCActionInterval*)CCEaseOut::actionWithAction((CCActionInterval*)(scale->copy()->autorelease()),2.0f);
	CCActionInterval* scale_exp_in = (CCActionInterval*)CCEaseExponentialOut::actionWithAction((CCActionInterval*)(scale->copy()->autorelease()));

	CCActionInterval* move_center = CCMoveTo::actionWithDuration(0.35f,CCPointMake(x,y));
	//CCActionInterval* move_center_exp_in = (CCActionInterval*)CCEaseOut::actionWithAction((CCActionInterval*)(move_center->copy()->autorelease()),2.0f);
	CCActionInterval* move_center_exp_in = (CCActionInterval*)CCEaseExponentialOut::actionWithAction((CCActionInterval*)(move_center->copy()->autorelease()));

	checked_card->runAction(move_center_exp_in);
	checked_card->runAction(rot_exp_in);
	checked_card->runAction(scale_exp_in);
}

void ActionLayer::itm_card4Callback(CCObject* pSender)
{
	curCardPrice = 4;
	mn_Cards->setIsTouchEnabled(0);
	checked_card = CCSprite::spriteWithFile("RightControl/c4.png");
	addChild(checked_card);
	checked_card->setPosition(CCPointMake(m_mnCardsX,m_mnCardsY));
	MoveCardFromControl();
}
void ActionLayer::itm_card5Callback(CCObject* pSender)
{
	curCardPrice = 5;
	mn_Cards->setIsTouchEnabled(0);
	checked_card = CCSprite::spriteWithFile("RightControl/c5.png");
	addChild(checked_card);
	checked_card->setPosition(CCPointMake(m_mnCardsX,m_mnCardsY-CARD_HEIGHT-CARD_PADDING));
	MoveCardFromControl();
}

void ActionLayer::itm_TimerStartCallback(CCObject* pSender)
{
	to1 = CCProgressTo::actionWithDuration(60.0f, 100.0f);
	lefttime = CCProgressTimer::progressWithFile("Timer/timer_digits_active.png");
	lefttime->setType(kCCProgressTimerTypeRadialCW);
	((CCSprite*)lefttime->getSprite())->setOpacity(150);
	pL_Timer->addChild(lefttime,2);
	lefttime->setPosition(ccp(11,-3));
	lefttime->runAction(CCSequence::actions(CCRepeat::actionWithAction((CCActionInterval*)to1->copy()->autorelease(),60.0f),CCCallFunc::actionWithTarget(this,callfunc_selector(ActionLayer::TimerOver)),NULL));
	
	setTimerMode(1);
	//wordaction
	word->runAction(CCEaseInOut::actionWithAction(CCScaleTo::actionWithDuration(1.5f,-1.0f,1.0f),3.0f));

	ShowAnswersMenu(RED);
}
void ActionLayer::itm_TimerPauseCallback(CCObject* pSender)
{
	// #x3
	if(lefttime->getPercentage()>1)
	{
		lefttime->pauseSchedulerAndActions();
		setTimerMode(2);
		//wordaction
		word->runAction(CCEaseInOut::actionWithAction(CCScaleTo::actionWithDuration(1.5f,1.0f,1.0f),3.0f));
	}
}
void ActionLayer::itm_TimerRunCallback(CCObject* pSender)
{
	lefttime->resumeSchedulerAndActions();
	setTimerMode(1);
	//wordaction
	word->runAction(CCEaseInOut::actionWithAction(CCScaleTo::actionWithDuration(1.5f,-1.0f,1.0f),3.0f));

}
void ActionLayer::TimerOver()
{
	setTimerMode(0);
	lefttime->removeFromParentAndCleanup(1);
}
// case:
// 0: start, 1: pause, 2: run
void ActionLayer::setTimerMode(int mode)
{
	itm_Timer_start->setIsVisible(false);
	itm_Timer_pause->setIsVisible(false);
	itm_Timer_run->setIsVisible(false);
	switch (mode)
	{
	case 0:
		itm_Timer_start->setIsVisible(true);
		break;
	case 1:
		itm_Timer_pause->setIsVisible(true);
		break;
	case 2:
		itm_Timer_run->setIsVisible(true);
		break;
	}
}

void ActionLayer::ShowAnswersMenu(int Mode)
{
	mn_Cards->setIsVisible(0);
	mn_Answers->setIsVisible(1);

	ShowAnswerCard("RightControl/c3_hybrid.png","RightControl/c3div.png","RightControl/c3bottom.png",ccp(m_mnCardsX,m_mnCardsY+CARD_HEIGHT+CARD_PADDING), 0);
	ShowAnswerCard("RightControl/c4_hybrid.png","RightControl/c4div.png","RightControl/c4bottom.png",ccp(m_mnCardsX,m_mnCardsY), 0.1f);

	//¬˚·Ó ÂÊËÏ‡ ÓÚÓ·‡ÊÂÌËˇ ÔÛÌÍÚ‡ "”„‡‰‡Î ÒÓÔÂÌËÍ"
	if(!Mode){
		//ÒÍ˚Ú¸
		CCMenuItem* p_other = (CCMenuItem*)mn_Answers->getChildByTag(RED);
		p_other->setIsVisible(0);
		}else{
		ShowAnswerCard("RightControl/c5_hybrid.png","RightControl/c5div.png","RightControl/c5bottom.png",ccp(m_mnCardsX,m_mnCardsY-CARD_HEIGHT-CARD_PADDING), 0.2f);
	}
}
void ActionLayer::ShowAnswerCard(const char* fHybrid, const char* fTop, const char* fBottom, CCPoint Position, float delay)
{
	CCLayer* pL_Answers = CCLayer::node();
	addChild(pL_Answers,0,ANSWER_LAYER);
	
	CCSprite* cardMask = CCSprite::spriteWithFile(fHybrid);
	pL_Answers->addChild(cardMask);	
	cardMask->setPosition(Position);

	CCSprite* cardScene1 = CCSprite::spriteWithFile(fTop);
	pL_Answers->addChild(cardScene1);	
	cardScene1->setPosition(Position);
	
	CCSprite* cardScene2 = CCSprite::spriteWithFile(fBottom);
	pL_Answers->addChild(cardScene2);
	cardScene2->setPosition(Position);
	cardScene2->setScaleY(0.0f);
	cardScene2->setSkewX(-20.0f);

	float t=0.3f;

	cardScene1->runAction(
		(CCActionInterval*)CCSequence::actions(
		CCDelayTime::actionWithDuration(delay),
		CCEaseIn::actionWithAction(CCScaleBy::actionWithDuration(t,1,0),3.0f),
		NULL)
		);

	cardScene1->runAction(
		(CCActionInterval*)CCSequence::actions(
		CCDelayTime::actionWithDuration(delay),
		CCEaseIn::actionWithAction(CCSkewBy::actionWithDuration(t,20,0),3.0f),
		NULL)
		);

	cardScene2->runAction((CCActionInterval*)CCSequence::actions(
		CCDelayTime::actionWithDuration(t+delay),
		CCEaseOut::actionWithAction(
		CCScaleTo::actionWithDuration(t,1,1),3.0f)
		,NULL)
		);
	cardScene2->runAction((CCActionInterval*)CCSequence::actions(
		CCDelayTime::actionWithDuration(t+delay),
		CCEaseOut::actionWithAction(
		CCSkewBy::actionWithDuration(t,20,0),3.0f),
		CCCallFunc::actionWithTarget(this,callfunc_selector(ActionLayer::ShowAnswerCardCallback))
		,NULL)
		);
}
void ActionLayer::ShowAnswerCardCallback()
{
	removeChildByTag(ANSWER_LAYER,1);
}

void ActionLayer::ShowTimer()
{
	//show timer
	CCActionInterval* mov_timer = CCMoveBy::actionWithDuration(1.0f,ccp(230,0));
	CCActionInterval* move_timer_eio = (CCActionInterval*)CCEaseInOut::actionWithAction(mov_timer,4.0f);
	pL_Timer->runAction(move_timer_eio);

	CCActionInterval* rot_light = CCRotateBy::actionWithDuration(1.0f,-10.0f);
	
	((CCSprite*)pL_Timer->getChildByTag(ID_DIGITS_L))->runAction((CCActionInterval*)rot_light->copy()->autorelease());
	((CCSprite*)pL_Timer->getChildByTag(ID_BUTTON_L))->runAction((CCActionInterval*)rot_light->copy()->autorelease());
}
void ActionLayer::HideTimer()
{
	//stopActions
	lefttime->removeFromParentAndCleanup(1);
	setTimerMode(0);

	//hide timer
	CCActionInterval* mov_timer = CCMoveBy::actionWithDuration(1.0f,ccp(-230,0));
	CCActionInterval* move_timer_eio = (CCActionInterval*)CCEaseInOut::actionWithAction(mov_timer,4.0f);
	pL_Timer->runAction(move_timer_eio);

	CCActionInterval* rot_light = CCRotateBy::actionWithDuration(1.0f,10.0f);
	
	((CCSprite*)pL_Timer->getChildByTag(ID_DIGITS_L))->runAction((CCActionInterval*)rot_light->copy()->autorelease());
	((CCSprite*)pL_Timer->getChildByTag(ID_BUTTON_L))->runAction((CCActionInterval*)rot_light->copy()->autorelease());
}
void ActionLayer::itm_1opponentCallback(CCObject* pSender)
{
	FMoveCor(tokens[itm_1opponent->getTag()],2);	
	snaps.IncCurAct();
	ChangeSelectorCallback(pSender);
	
	mn_WhoAnswer->setIsVisible(0);
	mn_Cards->setIsVisible(1);
	mn_Cards->setIsTouchEnabled(1);

	HideTimer();
	DropCard();
}
void ActionLayer::itm_2opponentCallback(CCObject* pSender)
{
	FMoveCor(tokens[itm_2opponent->getTag()],2);	
	snaps.IncCurAct();
	ChangeSelectorCallback(pSender);
	
	mn_WhoAnswer->setIsVisible(0);
	mn_Cards->setIsVisible(1);
	mn_Cards->setIsTouchEnabled(1);

	HideTimer();
	DropCard();
}
void ActionLayer::itm_3opponentCallback(CCObject* pSender)
{
	FMoveCor(tokens[itm_3opponent->getTag()],2);	
	snaps.IncCurAct();
	ChangeSelectorCallback(pSender);
	
	mn_WhoAnswer->setIsVisible(0);
	mn_Cards->setIsVisible(1);
	mn_Cards->setIsTouchEnabled(1);

	HideTimer();
	DropCard();
}
void ActionLayer::DropCard()
{
	CCActionInterval* rotate = CCRotateTo::actionWithDuration(0.5f,480);
	CCActionInterval* move = CCMoveTo::actionWithDuration(0.3f,ccp(-400,600));
	CCActionInterval* ease_move = CCEaseExponentialIn::actionWithAction(move);
	CCActionInterval* ease_rotate = CCEaseExponentialIn::actionWithAction(rotate);

	checked_card->runAction(ease_move);
	checked_card->runAction(ease_rotate);
}

//›ÚÓ ÙÛÌÍˆËˇ ÓÔÂ‰ÂÎˇÂÚ ‚ÓÁÏÓÊÌÓÒÚ¸ ıÓ‰‡.
//¬ÓÁ‚‡˘‡ÂÚ:
//0 - ‚ÓÁÏÓÊÂÌ ıÓ‰ Ì‡ h ıÓ‰Ó‚
//(3<=n<5)|64- ‚ÓÁÏÓÊÂÌ ıÓ‰ Ì‡ n ıÓ‰Ó‚ ËÁ h
//ID_FISHKA|128 - Ì‡ Á‡‰‡ÌÓÏ ÔÓÎÂ ÙË¯ÍË ID_FISH ‚ ÙÓÏ‡ÚÂ 00000xxx, „‰Â ·ËÚ ÛÍ‡Á˚‚‡ÂÚ ID ÙË¯ÍË(ÙË¯ÂÍ)
int ActionLayer::FMoveTroubles(SpriteTokenClass* psF, int h)
{
	if (!psF)
		return -2;

	int currentPos = psF->m_CurrentPosition;
	int targetPos = currentPos+h;
	int tablemax_ind=TABLEMAX-1;

	if(((currentPos==tablemax_ind)&&h>0)||((currentPos==0)&&(h==-1))) return -2;	

	if(targetPos>=TABLEMAX) return (tablemax_ind-currentPos)|64;

	if(tbl[targetPos]->m_F&15)	return (tbl[targetPos]->m_F&15)|128; else return 0;
}
//’Ó‰ ÚÓÍÂÌ‡ ps Ì‡ h ıÓ‰Ó‚.
//¬ÓÁÏÓÊÂÌ ıÓ‰ Ì‡ -n
int ActionLayer::FMoveCor(SpriteTokenClass* ps, int h)
{
	if(!ps)
		return 0;
	
	int currentPos = ps->m_CurrentPosition;
	tbl[currentPos]->ChangeCellF(ps->pS_F->getTag());
	
	int n=FMoveTroubles(ps,h);

	if(n==-2)
	{
		return 0;
	}

	if((n!=0)&&(n&64)) h=n&63;

	if(n&128) FMoveCor(GetTokenByTag(n&127),-1);//h=n;

	//if(n&64) h=n&63;
		
	curGroupPtr = &groups[ps->m_CurNumber];
	curGroupPtr->ChangeCurGroupPos(h);
	if(curGroupPtr->CurGroupPosition() >= 44)	// Ï‡ÍÒ ˜ËÒÎÓ ˇ˜ÂÂÍ ÔÓÎˇ
		gl.FinishGame();
	// push to vec
	CGroupsSnapshot gs(groups);	
	snaps.PushSnapshot(gs);
		
	//action
	float MoveDuration = 0.5f;
	CCActionInterval* ScaleIn = CCScaleBy::actionWithDuration(0.2f,1.2f,1.2f);

	ps->pS_FShadow->runAction(CCEaseOut::actionWithAction((CCActionInterval*)ScaleIn->copy()->autorelease(),3.0f));
	ps->pS_F->runAction(CCEaseOut::actionWithAction((CCActionInterval*)ScaleIn->copy()->autorelease(),3.0f));
	
	ps->pS_FShadow->runAction(CCSequence::actions(
		CCDelayTime::actionWithDuration(0.2f),
		CCEaseInOut::actionWithAction(CCMoveTo::actionWithDuration(MoveDuration,CCPointMake(tbl[currentPos+h]->m_X,tbl[currentPos+h]->m_Y)),3.0f)
		,NULL));
	ps->pS_FShadow->runAction(CCSequence::actions(
		CCDelayTime::actionWithDuration(0.2f),
		CCEaseInOut::actionWithAction(
		CCScaleTo::actionWithDuration(0.2f,0.24f,0.76f*tbl[currentPos+h]->m_Y/LUM_Y+0.15f
			),3.0f),NULL));
	ps->pS_FShadow->runAction(CCSequence::actions(
		CCDelayTime::actionWithDuration(0.2f),
		CCEaseInOut::actionWithAction(
			CCRotateTo::actionWithDuration(0.3f,atan((tbl[currentPos+h]->m_X-LUM_X)/LUM_Y)*180.0f/PI),3.0f
			),NULL));
	ps->pS_F->runAction(CCSequence::actions(
		CCDelayTime::actionWithDuration(0.2f),
		CCEaseInOut::actionWithAction(CCMoveTo::actionWithDuration(MoveDuration,CCPointMake(tbl[currentPos+h]->m_X,tbl[currentPos+h]->m_Y)),3.0f),
		NULL));
	
	ps->pS_FShadow->runAction(
		CCSequence::actions(
		CCDelayTime::actionWithDuration(0.8f),
		CCEaseIn::actionWithAction((CCActionInterval*)ScaleIn->reverse(),3.0f),NULL));

	ps->pS_F->runAction(
		CCSequence::actions(
		CCDelayTime::actionWithDuration(0.8f),
		CCEaseIn::actionWithAction((CCActionInterval*)ScaleIn->reverse(),3.0f),NULL));

	
	ps->setCurrentPos(currentPos+h);	
	tbl[currentPos+h]->ChangeCellF(ps->pS_F->getTag());
	return 1;
}
//’Ó‰ ÚÓÍÂÌ‡ ps Ì‡ h ıÓ‰Ó‚.
//¬ÓÁÏÓÊÂÌ ıÓ‰ Ì‡ -n
int ActionLayer::FMove(SpriteTokenClass* ps, int h)
{
	/*
	int n=FMoveTroubles(ps,h);

	if(n==-2)
	{
		return 0;
	}

	if((n!=0)&&(n&64)) h=n&63;

	if(n&128) FMove(GetTokenByTag(n&127),-1);//h=n;

	//if(n&64) h=n&63;
	*/
	int currentPos = ps->m_CurrentPosition;

	//action
	float MoveDuration = 0.5f;
	CCActionInterval* ScaleIn = CCScaleBy::actionWithDuration(0.2f,1.2f,1.2f);

	ps->pS_FShadow->runAction(CCEaseOut::actionWithAction((CCActionInterval*)ScaleIn->copy()->autorelease(),3.0f));
	ps->pS_F->runAction(CCEaseOut::actionWithAction((CCActionInterval*)ScaleIn->copy()->autorelease(),3.0f));

	ps->pS_FShadow->runAction(CCSequence::actions(
		CCDelayTime::actionWithDuration(0.2f),
		CCEaseInOut::actionWithAction(CCMoveTo::actionWithDuration(MoveDuration,CCPointMake(tbl[currentPos+h]->m_X,tbl[currentPos+h]->m_Y)),3.0f)
		,NULL));
	ps->pS_FShadow->runAction(CCSequence::actions(
		CCDelayTime::actionWithDuration(0.2f),
		CCEaseInOut::actionWithAction(
		CCScaleTo::actionWithDuration(0.2f,0.24f,0.76f*tbl[currentPos+h]->m_Y/LUM_Y+0.15f
		),3.0f),NULL));
	ps->pS_FShadow->runAction(CCSequence::actions(
		CCDelayTime::actionWithDuration(0.2f),
		CCEaseInOut::actionWithAction(
		CCRotateTo::actionWithDuration(0.3f,atan((tbl[currentPos+h]->m_X-LUM_X)/LUM_Y)*180.0f/PI),3.0f
		),NULL));
	ps->pS_F->runAction(CCSequence::actions(
		CCDelayTime::actionWithDuration(0.2f),
		CCEaseInOut::actionWithAction(CCMoveTo::actionWithDuration(MoveDuration,CCPointMake(tbl[currentPos+h]->m_X,tbl[currentPos+h]->m_Y)),3.0f),
		NULL));

	ps->pS_FShadow->runAction(
		CCSequence::actions(
		CCDelayTime::actionWithDuration(0.8f),
		CCEaseIn::actionWithAction((CCActionInterval*)ScaleIn->reverse(),3.0f),NULL));

	ps->pS_F->runAction(
		CCSequence::actions(
		CCDelayTime::actionWithDuration(0.8f),
		CCEaseIn::actionWithAction((CCActionInterval*)ScaleIn->reverse(),3.0f),NULL));

	ps->setCurrentPos(currentPos+h);
	tbl[currentPos]->ChangeCellF(ps->pS_F->getTag());
	tbl[currentPos+h]->ChangeCellF(ps->pS_F->getTag());
	return 1;
}

SpriteTokenClass* ActionLayer::GetTokenByTag(int Tag)
{
	SpriteTokenClass* result = NULL;
	for(int i=0;i<numGroupsInGame;i++)
	{
	if(tokens[i]->pS_F->getTag()==Tag) 
		{
		result = tokens[i];
		}
	}
	return result;
}

//RewindAnimation
void ActionLayer::RewindAnimation(CCLayer* parent)
{
	CCActionInterval* move_array[] = {CCMoveBy::actionWithDuration(1.0f,ccp(0,60.0f)),CCMoveBy::actionWithDuration(1.0f,ccp(0,50.0f)),CCMoveBy::actionWithDuration(1.0f,ccp(0,-30.0f))};
	CCActionInterval* scale_array[] = {CCScaleBy::actionWithDuration(1.0f,1.0f,1.3f),CCScaleBy::actionWithDuration(1.0f,1.0f,0.8f),CCScaleBy::actionWithDuration(1.0f,1.0f,1.8f)};
	CCLayer* pL_Rewind = CCLayer::node();
	parent->addChild(pL_Rewind,1,REWIND_STRIPE);
	srand((unsigned)time(NULL));
	for(int i=0;i<4;i++)
	{
		CCSprite* sprite_array[] = {CCSprite::spriteWithFile("RewindAnimation/rewind.png"),CCSprite::spriteWithFile("RewindAnimation/rewind2.png")};
		int numspr = rand()%2;
		pL_Rewind->addChild(sprite_array[numspr]);
		//randomize start
		sprite_array[numspr]->setPosition(ccp(x,+(float)(i*size.height/4+rand()%150)));
		sprite_array[numspr]->setScaleY(0.25f-(rand()%15)/100);
		sprite_array[numspr]->runAction(CCEaseBounceInOut::actionWithAction((CCActionInterval*)move_array[rand()%3]->copy()->autorelease()));
		sprite_array[numspr]->runAction(CCSequence::actions(CCEaseElastic::actionWithAction((CCActionInterval*)scale_array[rand()%3]->copy()->autorelease(),4.0f),CCCallFunc::actionWithTarget(this,callfunc_selector(ActionLayer::RewindAnimationCallback)),NULL));
	}
}
void ActionLayer::RewindAnimationCallback()
{
	this->removeChildByTag(REWIND_STRIPE,1);
}
/*
 Func for save ActionLayer's menu state
 in menustate variable (bit):
 1: mn_Timer
 2: mn_Cards
 4: mn_Answers
 8: game_menu
 
 use
 RestoreMenuState();
 */
void ActionLayer::SaveMenuState()
{
    menustate=0;
    if (mn_Timer->getIsTouchEnabled())
    {
        menustate|=1;
        mn_Timer->setIsTouchEnabled(false);
    }
    if (mn_Cards->getIsTouchEnabled())
    {
        menustate|=2;
        mn_Cards->setIsTouchEnabled(false);
    }
    if (mn_Answers->getIsTouchEnabled())
    {
        menustate|=4;
        mn_Answers->setIsTouchEnabled(false);
    }
    if (game_menu->getIsTouchEnabled())
    {
        menustate|=8;
        game_menu->setIsTouchEnabled(false);
    }
}
void ActionLayer::RestoreMenuState()
{
    if (menustate&1)
    {
        mn_Timer->setIsTouchEnabled(true);
    }
    if (menustate&2)
    {
        mn_Cards->setIsTouchEnabled(true);
    }
    if (menustate&4)
    {
        mn_Answers->setIsTouchEnabled(true);
    }
    if (menustate&8)
    {
        game_menu->setIsTouchEnabled(true);
    }
}

//////////////////////////////////////////////////////////////////////////
CGameLogic::CGameLogic(void)
{
	act = NULL;
}

CGameLogic::CGameLogic(ActionLayer * ptr)
{
	act = ptr;
}

CGameLogic::~CGameLogic(void)
{
}

int CGameLogic::StartGame()
{	
	std::stringstream ss;
	ss << "Current command # " << act->active_token->m_CurNumber;

	act->pLabelGroup = CCLabelTTF::labelWithString(ss.str().c_str(), "Thonburi", 24);
	act->pLabelGroup->setPosition(ccp(200,50));	
	act->addChild(act->pLabelGroup, 1);

	return 0;
}

int CGameLogic::ContinueGame()
{
	std::stringstream ss;
	ss << "Current command # " << act->active_token->m_CurNumber;

	act->pLabelGroup->setString(ss.str().c_str());

	return 0;
}

int CGameLogic::FinishGame()
{
	std::stringstream ss;
	ss << "Command # " << act->active_token->m_CurNumber << " won!!!!!!";

	act->pLabelGroup->setString(ss.str().c_str());

	return 0;
}

/////////////////////////////////////////////////////////////////////////
// GameMenuLayer
GameMenuLayer::GameMenuLayer()
{    
	this->setIsTouchEnabled(true);
	// Make sure the layer accepts touches
	CCTouchDispatcher::sharedDispatcher()->addTargetedDelegate(this, 0, false);
    
	checked=false;
    
	// Get window size and place the label upper.
    CCSize size = CCDirector::sharedDirector()->getWinSize();
    float x,y;
	x = size.width/2;
	y = size.height/2;

	float xs,ys;
	//desk
	CCSprite* pS_Menu = CCSprite::spriteWithFile("GameMenu/gamemenu.png");
	addChild(pS_Menu,0,ID_GMDESK);
	pS_Menu->setPosition(ccp(x,y));
	xs=x-pS_Menu->getContentSizeInPixels().width/2;
	ys=y-pS_Menu->getContentSizeInPixels().height/2;

	//swipe
	endSwipe = 258.0f;
	xStartPos = xs+110-34;
	pS_Swipe1 = CCSprite::spriteWithFile("GameMenu/swipe.png");
	pS_Swipe1->setAnchorPoint(ccp(0,0));
	addChild(pS_Swipe1,1,ID_SWIPE_RESTART);
	pS_Swipe1->setPosition(ccp(xStartPos,ys+212-27));
	pS_Swipe2 = CCSprite::spriteWithFile("GameMenu/swipe.png");
	pS_Swipe2->setAnchorPoint(ccp(0,0));
	addChild(pS_Swipe2,1,ID_SWIPE_MAINMENU);
	pS_Swipe2->setPosition(ccp(xStartPos,ys+141-26));

	//unlock animation effect
	//new game
	CCLabelBMFont* label = CCLabelBMFont::labelWithString("New Game","fonts/Minion_32.fnt");
	addChild(label,0,ID_TEXT_RESTART);
	label->setPosition(ccp(xs+225,ys+212));
	ccColor3B clr; 
	clr.r=100; // R
	clr.g=100; // G
	clr.b = 100; // B
	label->setColor(clr);
	CCSprite* chars[255];
	for(int j=0;j<label->getChildrenCount();j++)
	{
		chars[j] = (CCSprite*)label->getChildByTag(j);
		chars[j]->runAction(CCRepeatForever::actionWithAction((CCActionInterval*)
			CCSequence::actions(CCDelayTime::actionWithDuration(j*0.1f),
			CCSequence::actions(CCTintTo::actionWithDuration(0.5,250,250,250),CCTintTo::actionWithDuration(0.5,clr.b,clr.g,clr.r),NULL)->copy()->autorelease(),
			CCSequence::actions(CCDelayTime::actionWithDuration((label->getChildrenCount()-j)*0.1f)),
			NULL))
			);
	}	
	//Main menu
	CCLabelBMFont* label2 = CCLabelBMFont::labelWithString("Main menu","fonts/Minion_32.fnt");
	addChild(label2,0,ID_TEXT_MAINMENU);
	label2->setPosition(ccp(xs+225,ys+141));
	label2->setColor(clr);
	CCSprite* chars2[255];
	for(int j=0;j<label2->getChildrenCount();j++)
	{
		chars2[j] = (CCSprite*)label2->getChildByTag(j);
		chars2[j]->runAction(CCRepeatForever::actionWithAction((CCActionInterval*)
			CCSequence::actions(CCDelayTime::actionWithDuration(j*0.1f),
			CCSequence::actions(CCTintTo::actionWithDuration(0.5,250,250,250),CCTintTo::actionWithDuration(0.5,clr.b,clr.g,clr.r),NULL)->copy()->autorelease(),
			CCSequence::actions(CCDelayTime::actionWithDuration((label2->getChildrenCount()-j)*0.1f)),
			NULL))
			);
	}	
	
	//buttons
	CCSprite* pS_buttonSound = CCSprite::spriteWithFile("GameMenu/sound.png");
	addChild(pS_buttonSound);
	pS_buttonSound->setPosition(ccp(xs+125,ys+70));
	CCSprite* pS_buttonHelp = CCSprite::spriteWithFile("GameMenu/help.png");
	addChild(pS_buttonHelp);
	pS_buttonHelp->setPosition(ccp(xs+280,ys+70));
}

bool GameMenuLayer::ccTouchBegan(CCTouch *touch, CCEvent *withEvent)
{
	CCPoint touchPoint = touch->locationInView(touch->view());
	touchPoint = CCDirector::sharedDirector()->convertToGL(touchPoint);

	if (CheckPoint(touchPoint))
	{
		checked = true;	
		xdelta=touchPoint.x-cex->getPosition().x;
	}

	//hide menu on touch around
	CCSprite* spr = (CCSprite*)this->getChildByTag(ID_GMDESK);
	float szx = spr->getContentSizeInPixels().width/2;
	float szy = spr->getContentSizeInPixels().height/2;
	if(touchPoint.x>spr->getPosition().x+szx||touchPoint.x<spr->getPosition().x-szx||touchPoint.y>spr->getPosition().y+szy||touchPoint.y<spr->getPosition().y-szy)
	{
        //RestoreMenuState();
		ActionLayer* al = (ActionLayer*)this->getParent();
		((CCLayerColor*)al->getChildByTag(ID_SHADOWLAYER))->removeFromParentAndCleanup(1);
		this->removeFromParentAndCleanup(1);
        al->RestoreMenuState();
	}
	return true;
}
void GameMenuLayer::ccTouchMoved(CCTouch *touch, CCEvent *withEvent)
{	
	CCPoint touchPoint = touch->locationInView(touch->view());
	touchPoint = CCDirector::sharedDirector()->convertToGL(touchPoint);

	float limit = 200.0f;

	if(checked)
	{
		if(touchPoint.y>cex->getPositionInPixels().y+limit||touchPoint.y<cex->getPositionInPixels().y-limit||touchPoint.x<xStartPos-limit||touchPoint.x>xStartPos+endSwipe-cex->getContentSize().width+limit)
		{
			CCFiniteTimeAction* actionMoveRet = CCMoveTo::actionWithDuration( (ccTime)0.1, ccp(xStartPos, cex->getPositionInPixels().y) );
			cex->runAction( CCSequence::actions(actionMoveRet, /*actionMoveDone,*/ NULL) );
			cel->runAction(CCFadeIn::actionWithDuration(0.2f));
			checked=false;
			return;
		}

		if(touchPoint.x-xdelta<xStartPos+endSwipe-cex->getContentSize().width)
			if(touchPoint.x-xdelta>=xStartPos)
			{
			cex->setPosition(ccp(touchPoint.x-xdelta,cex->getPositionInPixels().y));
			//change opacity
			if(cex->getPositionInPixels().x-xStartPos<endSwipe/7) 
				cel->setOpacity(255-255*((cex->getPositionInPixels().x-xStartPos)/(endSwipe/7)));
			}
			else
			{
				CCFiniteTimeAction* actionMove = CCMoveTo::actionWithDuration((ccTime)0.1, ccp(xStartPos, cex->getPositionInPixels().y));
				cex->runAction( CCSequence::actions(actionMove,/*actionMoveDone,*/NULL) );
			}
		else
		{
			CCFiniteTimeAction* actionMove1 = CCMoveTo::actionWithDuration((ccTime)0.1, ccp(xStartPos+endSwipe-cex->getContentSize().width, cex->getPositionInPixels().y));
			cex->runAction( CCSequence::actions(actionMove1,/*actionMoveDone,*/NULL) );
		}
	}
}
void GameMenuLayer::ccTouchEnded(CCTouch *touch, CCEvent *withEvent)
{
	CCPoint touchPoint = touch->locationInView(touch->view());
	touchPoint = CCDirector::sharedDirector()->convertToGL(touchPoint);

	if(checked)
	{
	int newX = (int)touchPoint.x;
	
	if (newX >= xStartPos+endSwipe) {
		checked = false;
			int tag = cex->getTag();
			if(tag==ID_SWIPE_RESTART)
			{
				CCScene* pS_Scene = CCScene::node();
				ActionLayer* al = (ActionLayer*)this->getParent();
				CCLayer* pL_Restart = new ActionLayer(al->m_GameMode, al->m_RedName, al->m_GreenName, al->m_BlueName, al->m_YellowName);
				pS_Scene->addChild(pL_Restart);
				CCScene* s = CCTransitionFade::transitionWithDuration((1.0f), pS_Scene);
				pL_Restart->release();
				CCDirector::sharedDirector()->replaceScene(s);
			}
			if(tag==ID_SWIPE_MAINMENU)
			{
				ActionLayer* al = (ActionLayer*)this->getParent();
				((CCLayerColor*)al->getChildByTag(ID_SHADOWLAYER))->removeFromParentAndCleanup(1);
				this->removeFromParentAndCleanup(1);
                al->RestoreMenuState();
                
				CCScene* pS_MainMenuScene = CCScene::node();
				CCLayer* pL_MainMenu = new MainMenuLayer(1);
				pS_MainMenuScene->addChild(pL_MainMenu,0);
				pL_MainMenu->release();
				//CCScene* s = CCTransitionFade::transitionWithDuration((1.2f), pS_MainMenuScene);
				CCDirector::sharedDirector()->pushScene(pS_MainMenuScene);
			}
	}
	else
	{
		if(!checked)
			return;
		CCFiniteTimeAction* actionMove = CCMoveTo::actionWithDuration( (ccTime)0.1, ccp(xStartPos, cex->getPositionInPixels().y) );
		cex->runAction( CCSequence::actions(actionMove, /*actionMoveDone,*/ NULL) );
		cel->runAction(CCFadeIn::actionWithDuration(0.2f));
	}
	checked = false;
	}
}
bool GameMenuLayer::CheckPoint(CCPoint cp)
{
	int d = 10;
	if(cp.x > pS_Swipe1->getPositionX() - d && cp.x < pS_Swipe1->getPositionX()+pS_Swipe1->getContentSize().width + d)
		if(cp.y > pS_Swipe1->getPositionY() - d && cp.y < pS_Swipe1->getPositionY()+pS_Swipe1->getContentSize().height + d)
		{
			cel = (CCLabelBMFont*)this->getChildByTag(ID_TEXT_RESTART);
			cex = pS_Swipe1;
			return true;
		}

	if (cp.x > pS_Swipe2->getPositionX() - d && cp.x < pS_Swipe2->getPositionX()+pS_Swipe2->getContentSize().width + d)
		if (cp.y > pS_Swipe2->getPositionY() - d && cp.y < pS_Swipe2->getPositionY()+pS_Swipe2->getContentSize().height + d)
		{
			cel = (CCLabelBMFont*)this->getChildByTag(ID_TEXT_MAINMENU);
			cex = pS_Swipe2;
			return true;
		}

	return false;
}

